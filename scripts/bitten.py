import os
import shutil

import fire

from scripts import (
    collapse_texts,
    insert_into_db,
)


def resolve_bitten_files(
        input_dir: str,
        archive_dir: str,
        entered_tweets_dir: str,
):
    '''
    This function resolves all files in the `input_dir` given, where it expects there to only be files
    in pairs that have been generated by `scripts/random_bite.py`.

    Order of operation is:
        - List the files to find pairs by matching the slugs in the filenames
        - Make "collapsed" versions of the texts files using collapse_texts.py
        - Move the original texts files into an archive directory to maintain the full corpus of tweets
        - Enter the "collapsed" tweets into the database
        - Move the collapsed tweets file into `entered_tweets_dir`

    Args:
        input_dir: directory to search for the texts/strings file pairs
        archive_dir: directory to move each full original tweet text file
        entered_tweets_dir: directory to move the collapsed tweet files to after entry
    '''
    # Sanity checks
    assert os.path.isdir(input_dir)
    assert os.path.isdir(archive_dir)
    assert os.path.isdir(entered_tweets_dir)

    all_files = os.listdir(input_dir)
    slugs = []
    for file in all_files:
        # The slug is the set of characters between the last "_" and the "." of the file extension
        slugs.append(file[file.rfind('_') + 1:file.rfind('.')])

    unique_slugs = set(slugs)

    # Sanity check
    assert len(unique_slugs) == len(all_files) / 2

    text_files = [x for x in all_files if x.startswith('texts_')]
    string_files = [x for x in all_files if x.startswith('strings_')]

    pairings = {}
    for slug in slugs:
        filenames = {
            'texts_file': os.path.join(input_dir, [x for x in text_files if slug in x][0]),
            'strings_file': os.path.join(input_dir, [x for x in string_files if slug in x][0]),
        }

        # Make a new "collapsed" file and save the filename
        filenames['collapsed_file'] = collapse_texts.collapse_texts(
            texts_df_filename=filenames['texts_file'],
            strings_filename=filenames['strings_file'],
        )

        pairings[slug] = filenames

    for files in pairings.values():
        # Move the original full texts file into an archive
        shutil.move(files['texts_file'], archive_dir)

        # Enter the collapsed file into the database
        insert_into_db.insert_tweets(input_filename=files['collapsed_file'])

        # Move the collapsed file into the entered tweets directory
        shutil.move(files['collapsed_file'], entered_tweets_dir)

        # Delete the strings file
        os.remove(files['strings_file'])


if __name__ == '__main__':
    fire.Fire(resolve_bitten_files)
